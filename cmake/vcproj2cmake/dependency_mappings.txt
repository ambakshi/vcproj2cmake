###########################################################################
# Windows libraries (please always reference as lower-case name in original .vc[x]proj)
advapi32:WIN32|UNIX=${WIN32_LIBRARIES}
comdlg32:WIN32|UNIX=${WIN32_LIBRARIES}
crypt32:WIN32|UNIX=${WIN32_LIBRARIES}
ddraw:WIN32|UNIX=${WIN32_LIBRARIES}
gdi32:WIN32|UNIX=${WIN32_LIBRARIES}
gdiplus:WIN32|UNIX=${WIN32_LIBRARIES}
glu32:=${OPENGL_glu_LIBRARY}
htmlhelp:WIN32|UNIX=${WIN32_LIBRARIES}
iphlpapi:WIN32|UNIX=${WIN32_LIBRARIES}
kernel32:WIN32|UNIX=${WIN32_LIBRARIES}
mfcs80:WIN32|UNIX=${MFC_LIBRARIES}
mfcs80d:WIN32|UNIX=${MFC_LIBRARIES}
mpr:WIN32|UNIX=${WIN32_LIBRARIES}
msimg32:WIN32|UNIX=${WIN32_LIBRARIES}
msvcrt:WIN32|UNIX=${WIN32_LIBRARIES}
nddeapi:WIN32|UNIX=${WIN32_LIBRARIES}
netapi32:WIN32|UNIX=${WIN32_LIBRARIES}
odbc32:WIN32|UNIX=${ODBC_LIBRARIES}
odbccp32:WIN32|UNIX=${ODBC_LIBRARIES}
ole32:WIN32|UNIX=${WIN32_LIBRARIES}
oleaut32:WIN32|UNIX=${WIN32_LIBRARIES}
opengl32:=${OPENGL_gl_LIBRARY}
psapi:WIN32|UNIX=${WIN32_LIBRARIES}
rpcrt4:WIN32|UNIX=${WIN32_LIBRARIES}
setupapi:WIN32|UNIX=${WIN32_LIBRARIES}
shell32:WIN32|UNIX=${WIN32_LIBRARIES}
shlwapi:WIN32|UNIX=${WIN32_LIBRARIES}
user32:WIN32|UNIX=${WIN32_LIBRARIES}
uuid:WIN32|UNIX=${WIN32_LIBRARIES}
version:WIN32|UNIX=${WIN32_LIBRARIES}
wininet:WIN32|UNIX=${WIN32_LIBRARIES}
winmm:WIN32|UNIX=${WIN32_LIBRARIES}
winspool:WIN32|UNIX=${WIN32_LIBRARIES}
wintrust:WIN32|UNIX=${WIN32_LIBRARIES}
ws2_32:WIN32|UNIX=${WIN32_LIBRARIES}
wtsapi32:WIN32|UNIX=${WIN32_LIBRARIES}
###########################################################################
# third-party libraries
dynapdf:WIN32
###########################################################################
# translate "Internet project" components into their related Findxxx.cmake
# macro's ${xxx_LIBRARIES} string.
cairo:=${Cairo_LIBRARIES}
iconv:=${ICONV_LIBRARIES}
# For Boost libraries, we will list both Debug and Release naming variants,
# but _both_ will forward to the common variable (non-_DEBUG, non-_RELEASE),
# since it could cause problems otherwise (it's probably not always guaranteed
# that a Debug build links to Debug-type Boost libraries, and vice versa)
# Since regex are now supported, we'll use more generic patterns
# to detect Boost library names.
libboost_date_time-.*-1_.*:=${Boost_DATE_TIME_LIBRARY}
# It seems that on Windows, filesystem implicitly fetches system dependency.
libboost_filesystem-.*-1_.*:=${Boost_FILESYSTEM_LIBRARY} ${Boost_SYSTEM_LIBRARY}
libboost_regex-.*-1_.*:=${Boost_REGEX_LIBRARY}
libboost_serialization-.*-1_.*:=${Boost_SERIALIZATION_LIBRARY}
libboost_signals-.*-1_.*:=${Boost_SIGNALS_LIBRARY}
libboost_system-.*-1_.*:=${Boost_SYSTEM_LIBRARY}
libboost_thread-.*-1_.*:=${Boost_THREAD_LIBRARY}
libboost_unit_test_framework-.*-1_.*:=${Boost_UNIT_TEST_FRAMEWORK_LIBRARY}
# It seems that on Windows, wserialization implicitly fetches serialization dependency.
libboost_wserialization-.*-1_.*:=${Boost_WSERIALIZATION_LIBRARY} ${Boost_SERIALIZATION_LIBRARY}
libcurl:=${CURL_LIBRARIES}
# Hmm, the mapping of OpenSSL libeay32 and ssleay32 seems weird.
# For ssleay32, converting to the more specific OPENSSL_SSL_LIBRARIES
# probably is ok, but libeay32 probably needs to map to the more general
# OPENSSL_LIBRARIES, to include OPENSSL_CRYPTO_LIBRARY (libcrypto.so).
libeay32.*:=${OPENSSL_LIBRARIES}
ssleay32.*:=${OPENSSL_SSL_LIBRARIES}
libpng:=${PNG_LIBRARIES}
libxml2:=${LIBXML2_LIBRARIES}
# WARNING: LTDL is LGPL (no static linking for proprietary apps!)
ltdl:=${LTDL_LIBRARIES}
zdll:=${ZLIB_LIBRARIES}
###########################################################################
# Application-specific libraries
# foo library is Win32-only
foo:WIN32
###########################################################################
# translation of project-specific libraries from their debug-postfix _names_ to actual _target_ expression
bar:WIN32
bar_d:WIN32=bar
baz_u:WIN32=baz
baz_ud:WIN32=baz
barf_d:=barf
